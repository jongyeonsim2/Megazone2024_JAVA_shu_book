1. 비즈니스 주제
   트우트(트위트)
   
   - 중요한 도메인
     팔로워(follower) : 구독자 
     팔로잉(following) : 구독중
     팔로우(follow) : 구독
     
     사용자간의 관계 다:다로 구성.
     
   class
   - Twootr
     트위터
   - User : 사용자
     KeyGenerator : pw 암호화
   - Twoot : 트윗(메세지)
   
   Interface
   - UserRepository, TwootRepository : 데이터 자장소
     UserRepository 구현체 : InMemoryUserRepository
     TwootRepository 구현체 : InMemoryTwootRepository
   - ReceiverEndPoint : 트위(메세지) 수신
   - SenderEndPoint : 트위(메세지) 송신
   
   enum
   - DeleteStatus : 트위 상태
   - FollowStatus : follow(구독) 상태
   - RegistrationStatus : 등록 상태
   
   test case
   - TwootrTest : 트윗을 구현하기 위한 TDD
   - TestData : 테스트 케이스에서 사용되는 임시 데이터
   
2. 기반 기술
   - http, sse, websocket
     a. http
        hand-shake(연결 확립)
        요청에 따른 처리 후 응답.
        
     b. SSE(Server-Sent_Event)
        hand-shake(연결 확립)
        request가 없어도 응답이 오면 좋겠음.
        단방향 통신.
        서버의 데이터를 실시간으로 지속적으로 streaming 하는 기술.
        
        - 동작
          첫 연결시 데이터를 주고 받은 뒤 연결된 상태를 유지하고
          단방향으로 서버가 일방적으로 데이터를 전송.(클라이언트는 수신만 함.)
        
     c. WebSocket
        hand-shake(연결 확립)
        request가 없어도 응답이 오면 좋겠음.
        양방향 통신.
        
        - 동작
          서버와 클라이언트 간에 socket connection 을 유지해서
          양방향 통신 또는 단방향 통신이 가능하도록 하는 기술.
   
   
   - 통신
     7Layer protocol
     
     http : tcp/ip 기반
       handshake( session 확립, 기반 tcp/ip ) 
       request, response
       request, response
       request, response
     
     websocket : tcp/ip 기반
       handshake( session 확립, 기반 tcp/ip ) 
         C언어로 구현 - OS에서 제공되는 socket lib(저급)를 이용해야 함.
                      language C => 저급
                      OS 커널에서 제공되는 aip => 저급
                      
                      serverSocket
                        배열로 clintSocket 을 관리.
                        clintSocket = {{127.0.0.1, 9000}, {127.0.0.2, 9000}}
                      clinetSocket 1 : 127.0.0.1, 9000
                      clinetSocket 2 : 127.0.0.2, 9000
       response
       response
       response
       
       예) 주식거래, 코인거래, 선물거래, 외환거래, 트위터, 카톡 => 실시간으로 가격이 변동됨.
          시장 참여자(사용자, app client) 시장목록화면에서 
          가격변동에 대해서 사용자가 귀찮게 resquest  를 하지 않아도,
          최신 가격 정보를 서버가 알아서 response 해주면 더 좋지않을까?
          
          장점 : 클라인트가 굳이 request  를 하지 않아도 됨.
                서버가 굳이 reqeust 를 받아서 처리하지 않아도 됨.
     
     
          ChatServer : multi thread 동작
          			   ChatServer 에서는 확립된 clientSocket를 배열로 관리하고 있지 았음.
          			   => 부모( WebSocketServer )에서 관리하고 있다는 것.
          ChatClient 1 : single thread 동작
          ChatClient 2 : single thread 동작
     
   - 네트워크
     - OSI7 Layer
     
       애플리케이션 계층(L7)
       프리젠테이션 계층(L6)
       세션 계층(L5)
       트랜스포트 계층(L4)
       네트워크 계층(L3)
       데이터링크 계층(L2)
       물리 계층(L1)
     
     - TCP/IP 계층 모델
       애플리케이션 계층( L5, L6, L7 )
       트랜스포트 계층
       인터넷 계층
       네트워크 인터페이스 계층( L1, L2 )
     
     - 애플리케이션 계층
       사용자를 위한 서비를 제공.( 웹 브라우저 )
       
       예) 보고 싶은 웹페이지를 요청. www.naver.com
     
     - 트랜스포트 계층
       애플리케이션 계층의 프로그램에서 전달받은 데이터를 목적지 애플리케이션의
       계층의 프로그램까지 전달하는 것.
       
       전달의 신뢰성을 위한 기능 : 재전송 기능
       
       예) 웹 브라우저의 탭별로 구분 관리되는 포트정보를 사용해서
           www.naver.com(ip) 의 웹서버의 80 포트로 요청을 보냄.
       
     - 인터넷 계층
       데이터 어드레스 정보를 덧붙여 목적지까지 전달하는 것.
       네트워크간의 전송.
       네트워크의 대표적인 장비가 라우터(L3 switch).
       
       라우터의 중요한 목적은 라우팅하는 것.(최단경로, 손실없도록)
       
       예) ip 어드레스 정보를 보고 목적지로 데이터를 전달.
       
     - 네트워크 인터페이스 계층
       유선 LAN 어댑터나 무선 LAN 어댑터가 처리할 수 있는 형태로 데이터를
       변환(전기적 : 네트워크 카드, NIC)하고 이 데이터를 먼 목적지(광케이블)까지 전달하는 것.
     
     - 데이터의 구조(웹페이지의 경우)
       이더넷 헤더(유선 LAN으로 데이터를 전송하기 위한 규약) + IP헤더 + TCP 헤더 + HTTP 헤더
       
     - 대표적인 protocol
       a. 애플리케이션 계층
          - HTTP : 웹 페이지 데이터를 송수신할 때 사용
          - HTTPS : 보안을 위해 웨 페이지를 주고 받을 때
          - POP3 : 서버에 보관된 메일을 꺼내올 때
          - SMTP : 메일 송신
          - FTP : 파일 전송
          - Telnet : 컴퓨터를 원격에서 제어
          - SSH : 보안을 위해 컴퓨터를 원격에서 제어하는 과정을 암호화.
          - SMB : 윈도우 컴퓨터와 파일을 공유
          - DHCP : 컴퓨터에 프라이빗 IP를 동적으로 할당
          - DNS : 도메인 이름(www.naver.com)과 IP 어드레스를 서로 변환함.
          - SSL : 보안을 위해 통신 과정에서 주고받은 데이터를 암화화.
          
       b. 트랜스포트 계층
          - TCP : 애프리케이션의 데이터를 송수신하되, 정확한 전달을 중시함.
                  송수신의 데이터의 처리과정의 신뢰성.
          - UDP : 애플리케이션의 데이터를 송수신화되, 전송 속도를 중시함.
                  송수신 데이터의 신뢰성을 보장하지 않음.
                  
       c. 인터넷 계층
          - IP : 패킷을 목적지까지 전달.
          - ICMP : IP 통신의 오류를 전달.
          - IPSec : 패킷을 암호화하여 전달.
          - ARP : 네트워크 장비의 MAC 어드레스를 알아냄.
            IP : 가상, DHCP(중복)
                 고정 IP
                 Dynamic IP => 현재 강의실에서 사용됨.
            MAC 주소 : 물리적(유일)
                      해당 MAC 주소를 사용중인 Host 를 알 수 있게 됨.
       
       d. 네트워크 인터페이스 계층
          - 이더넷 : 일반 금속 케이즐이나 광 케이블을 통해 데이터를 전달.
          - PPP : 사용자 인증 후에 원격지의 장비와 통신.
       
     - 스위치( switch )
       a. L3 스위치, 네트워크 계층
          - 기능
            트래픽 모니터링, 라우팅 설정, L2 스위치의 기능도 일부 가짐.
            L2(데이터 링크 계층) 스위치의 경우 MAC 주소를 알고 데이터를 전달하였다면
            L3 스위치는 IP주소를 알고 데이터를 전달하는 장비.
            
          - 라우팅
            데이터 패킷이 출발지에서 목적지로 가는 가장 좋은 경로를 찾는 과정.
            
       b. L4 스위치, 트랜스포트 계층
          - 기능
            로드밸런싱(부하분산)
            외부에서 들어노는 모든 요청을 받은 뒤, 서버들에게 적절하게 요청을
            나누어 주는 것.
            
            최악의 경우 서버가 다운되는 경우를 방지.
          - 로드 밸런싱
            가용성 향상 : 다운된 서버를 대신 수행하여 서비스 중단을 최소화
            확장성 : 서비스의 사용량이 증가하더라도 새로운 서버를 추가하여
                  시스템의 성능을 유연하게 확장.
          - 사례
            공유기 기능( NAT, DHCP, 포트포워드 )
          
       c. L7 스위치, 애플리케이션 계층
          - 기능
            네트워크 트래픽을 분석하고 처리하여 응용프로토콜 수준에서 동작.
            웹애플리케이션의 배포와 부하 분산을 위해서 사용.
          - 특징
            하위 L2, L3, L4 스위치의 기능을 모두 보유.            
     
     - IPv4의 종류
       - classful IP( 32bit, 8bit 단위로 n/w ID, host ID 구분 )
         클래스 A : 대규모, 할당 가능한 IP 수 : 16,777,214
         클래스 B : 중규모, 할당 가능한 IP 수 : 65,354
         클래스 C : 소규모, 할당 가능한 IP 수 : 254
         클래스 D : 멀티캐스트
         클래스 E : 예약용
       
       - classless IP( 8bit 구분없이 IPv4를 할당. )
         CIDR(classless inter-domain routing)
         
         계산해주는 웹 페이를 사용하면 됨.( cidr.xyz )
         
         10.88.135.144/28
         
         "/" 를 기준으로 네트워크 ID와 Host ID를 구분해서 표기. 
         
         192.168.0.0/16
         16 bit( 192.168 ) 를 네트워크ID 로 사용하는 네트워크임.
         
         192.168.0.0/16의 사설 IP 범위
         192.168.0.0 ~ 192.168.255.255 => 256 X 256 = 65,536 개임.
         
       - 사용 장소에 따른 구분
         a. 글로벌 Ipv4 : 공인IP, 외부용
         b. private IPv4 : 조직내 내부용( class A ~ class C )
            NAT를 사용해서 internet을 사용.
         c. 예외 IPv4
            네트워크주소(= 네트워크ID) : Host ID 가 0 인경우.
            
            156.34.56.0 :  156.34.56 대역을 사용하는 컴퓨터들(네트워크 영역)
            156.34.0.0  :  156.34 대역을 사용하는 컴퓨터들(네트워크 영역)
            
            브로드캐스트 주소 : Host ID가 1인 경우.
            루프백 주소 : 127.0.0.1, 자기 자신을 나타냄.
      
   - Thread
     1. 프로세스
        사용자가 작성한 프로그램이 운영체제에 의해 메모리 공간을 할당받아
        실행중인 것.
        
        데이터, 메모리등(자원), 스레드(한 개)로 구성. => single thread
        
     2. 스레드
        두 개 이상의 스레드가 존재하여 작업을 수행. => multi thread
     
   - IO( JAVA의 Input Output, 입출력 )
     1. 스트림(stream)
        - 데이터를 운반하는데 사용되는 통로
        - 단방향 통신
          Input( 읽는 것, 빨대를 꼽음 ) : read 만 가능한 동작
          Output( 보내는 것, 출력 ) : write 만 가능한 동작
        - read, write 를 동시에 하려면, 스트림이 두 개가 있어야 함.
          읽기 전용 스트림 : InputStream( 바이트 기반 )
          쓰기 전용 스트림 : OutputStream( 바이트 기반 )
        - 자바에서는 문자처리시 2byte 단위 처리
          따라서, 문자 기반의 스트림이 존재함.( Reader, Writer )
     2. 스트림의 종류
        바이트 stream, 문자 stream, 보조 stream 
     3. 스트림의 대상
        메모리, file, 네트워크
     4. 보조 Stream
        데이터를 입출력하는 기능은 없지만, 스트림의 기능을 향상시키거나
        새로운 기능을 추가할 경우 사용.
        
        바이트 기반의 보조 Stream
        문자 기반의 보조 Stream
     5. 바이트 기반의 보조 Stream
        스스로 입출력을 할 수 없음.
        
        BufferedInputStream, BufferedOutputStream
        
        버퍼가 가득 차면, 버펌의 모든 내용을 출력 소스에 출력함.
        버퍼를 비우고 다시 프로그램으로부터의 출력을 저장할 준비를 하게됨.
        
        마지막 출력 부분에서 출력소스에 쓰지 못하고 버퍼에 남아 있는 상태가 있어,
        처리를 종료할 때 flush() 또는 close() 를 해야 함.
        
     6. 문자 기반의 보조 Stream
     
        BufferedReader, BufferedWriter ( 중요 )
        버퍼를 이용해서 입출력의 효율을 높일 수 있도록 하는 보조 역할을 함.
     
     7. 표준입출력 
        System.in( 입력 )
        System.out( 출력 )
        System.err( 에러 )
     
     8. 기타
        file, 직렬화
     
      

   - lib
     통신, 네트워크, 프로토콜 => websocket lib

   - java
     Thread, IO
   
3. 의존 관계 역전
   3.1 위키 
       추상화에 의존을 해야 하고, 구체화에 의존하면 안됨.
       
       - 고수준 모듈이 저수준 모듈에 의존하지 말아야 함.
       
         고수준(high level), 저수준(low levle)
         
         고수준(class) -> 저수준 모듈(class) : 유지보수에 좋지 않음.
         고수준(class) -> 추상화 -> 저수준 모듈(class) : 유지보수에 좋음.
         
         저수준 모듈(class)
           고수준 클래스의 작업을 돕는 작은 클래스라고 할 수 있음.
           일반적으로 파일 입출력, 데이터베이스 통신과 같은 기술적인 부분을 다룸.
           
           기술적인 부분을 다루는 저수준 클래스를 먼저 작성하고, 
           구현된 저수준 클래스들을 사용해 현실 세계에서 유용한 비즈니스적인
           부분을 다루는 고수준 클래스를 작성함.
           
           고수준 클래스가 저수준 클래스를 사용하게됨으로 고수준 클래스가 저수준
           클래스에 의존하는 것이 자연스럽게 보이지만,
           저수순 클래스는 빈번하게 변경되고 추가될 떄 마다 고수준 클래스가
           영향을 받기 쉬운 의존관계를 역전시켜야 함.
           
       - 추상화는 세부사항(구현)에 의존해서는 안됨.
         구현이 변경이 되더라도 추상화가 변경되면 안된다는 뜻.
           
         라디오든 CD 플레이어든 핵심 정보만 추리면 무언가를 재생할 수 있는
         기능을 생각해볼 수 있음.
         
         그래서, playable로 추상화를 하면, 핵심 정보만 뽑아낼 수 있음.
         
         // 추상화
         interface Playable {
           void play(); 
         }
         
         class Radio implements Playable {
            public void play() {  }
         }
         
         class CDPlayer implements Playable {
            public void play() {  }
         }
         
         
         이렇게 추상화를 하면 Radio 든 CDPlayer 든 내부적으로 어떻게
         돌아가는지는 상관없이 사용자 입장에서 재생 버튼을 누르기만 하면,
         음악, 노래, 말소리가 흘러나오게 됨.
         
         Playable[] list = { new Radio(), new CDPlayer() };
         
         for (Playable p : list) {
            p.play();
         }
         
         
         
         
       






